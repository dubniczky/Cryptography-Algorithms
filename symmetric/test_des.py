from des import *


def test_binary_to_bytes():
    assert binstring_to_bytes('00000001') == b'\x01'
    assert binstring_to_bytes('00000011') == b'\x03'
    assert binstring_to_bytes('11110000') == b'\xf0'
    assert binstring_to_bytes('1111000010000000') == b'\xf0\x80'


def test_bytes_to_binary():
    assert bytes_to_binstring(b'\x01') == '00000001'
    assert bytes_to_binstring(b'\x03') == '00000011'
    assert bytes_to_binstring(b'\xf0') == '11110000'
    assert bytes_to_binstring(b'\xf0\x80') == '1111000010000000'


def test_binary_xor():
    assert binary_xor('1011','0000') == '1011'
    assert binary_xor('1','0000') == '0001'
    assert binary_xor('1101','1011') == '0110'
    assert binary_xor('10101010','01010101') == '11111111'


def test_binary_rotate():
    assert left_binary_rotate('010') == '100'
    assert left_binary_rotate('111') == '111'
    assert left_binary_rotate('1010111001') == '0101110011'
    assert left_binary_rotate('0101110011') == '1011100110'
    assert left_binary_rotate('1010111001', 2) == '1011100110'


def test_f():
    assert f(
        '11110000101010101111000010101010',
        '000110110000001011101111111111000111000001110010'
    ) == '00100011010010101010100110111011'


def test_subkeys():
    assert subkeys('0001001100110100010101110111100110011011101111001101111111110001') == [
        '000110110000001011101111111111000111000001110010', '011110011010111011011001110110111100100111100101',
        '010101011111110010001010010000101100111110011001', '011100101010110111010110110110110011010100011101',
        '011111001110110000000111111010110101001110101000', '011000111010010100111110010100000111101100101111',
        '111011001000010010110111111101100001100010111100', '111101111000101000111010110000010011101111111011',
        '111000001101101111101011111011011110011110000001', '101100011111001101000111101110100100011001001111',
        '001000010101111111010011110111101101001110000110', '011101010111000111110101100101000110011111101001',
        '100101111100010111010001111110101011101001000001', '010111110100001110110111111100101110011100111010',
        '101111111001000110001101001111010011111100001010', '110010110011110110001011000011100001011111110101'
    ]


def test_static_encrypt():
    assert des_encrypt(
        b'\x13\x34\x57\x79\x9b\xbc\xdf\xf1',
        b'\x01\x23\x45\x67\x89\xab\xcd\xef'
    ) == b'\x85\xe8\x13T\x0f\n\xb4\x05'
